package cc.rcbb.leetcode.topic_37;

import cc.rcbb.leetcode.common.RcbbPrinter;

/**
 * 37. 解数独
 * https://leetcode-cn.com/problems/sudoku-solver/
 */
class Solution {

    boolean[][] row = new boolean[9][9];
    boolean[][] col = new boolean[9][9];
    boolean[][][] cell = new boolean[3][3][9];

    public void solveSudoku(char[][] board) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.') {
                    int t = board[i][j] - '1';
                    // 横、竖、九个方格
                    row[i][t] = col[j][t] = cell[i / 3][j / 3][t] = true;
                }
            }
        }
        f(board, 0, 0);
    }

    boolean f(char[][] board, int x, int y) {
        if (y == 9) {
            return f(board, x + 1, 0);
        }
        if (x == 9) {
            return true;
        }
        if (board[x][y] != '.') {
            return f(board, x, y + 1);
        }
        for (int i = 0; i < 9; i++) {
            if (!row[x][i] && !col[y][i] && !cell[x / 3][y / 3][i]) {
                // 满足条件才尝试放入数字
                board[x][y] = (char) (i + '1');
                row[x][i] = col[y][i] = cell[x / 3][y / 3][i] = true;
                if (f(board, x, y + 1)) {
                    // 为true时，代表放入成功
                    break;
                } else {
                    // 为false，放入失败，回溯
                    board[x][y] = '.';
                    row[x][i] = col[y][i] = cell[x / 3][y / 3][i] = false;
                }
            }
        }
        return board[x][y] != '.';
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        //输入：board = [
        //["5","3",".",".","7",".",".",".","."],
        //["6",".",".","1","9","5",".",".","."],
        //[".","9","8",".",".",".",".","6","."],
        //["8",".",".",".","6",".",".",".","3"],
        //["4",".",".","8",".","3",".",".","1"],
        //["7",".",".",".","2",".",".",".","6"],
        //[".","6",".",".",".",".","2","8","."],
        //[".",".",".","4","1","9",".",".","5"],
        //[".",".",".",".","8",".",".","7","9"]]
        //输出：[
        //["5","3","4","6","7","8","9","1","2"],
        //["6","7","2","1","9","5","3","4","8"],
        //["1","9","8","3","4","2","5","6","7"],
        //["8","5","9","7","6","1","4","2","3"],
        //["4","2","6","8","5","3","7","9","1"],
        //["7","1","3","9","2","4","8","5","6"],
        //["9","6","1","5","3","7","2","8","4"],
        //["2","8","7","4","1","9","6","3","5"],
        //["3","4","5","2","8","6","1","7","9"]]
        char[][] board = new char[][]
                {
                        {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                        {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                        {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                        {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                        {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                        {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                        {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                        {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                        {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        solution.solveSudoku(board);
        RcbbPrinter.print(board);
    }
}